import { app, BrowserWindow, ipcMain, screen, globalShortcut } from "electron";
import ollama from "ollama";
const path = require("path");

// This allows TypeScript to pick up the magic constants that's auto-generated by Forge's Webpack
// plugin that tells the Electron app where to look for the Webpack-bundled app code (depending on
// whether you're running in development or production).
declare const MAIN_WINDOW_WEBPACK_ENTRY: string;
declare const MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY: string;
declare const OUTPUT_WINDOW_WEBPACK_ENTRY: string;
const env = process.env.NODE_ENV || "development";

if (env === "development") {
  try {
    require("electron-reloader")(module, {
      debug: true,
      watchRenderer: true,
    });
  } catch (_) {
    console.log("Error");
  }
}
// Handle creating/removing shortcuts on Windows when installing/uninstalling.
if (require("electron-squirrel-startup")) {
  app.quit();
}

let mainWindow: BrowserWindow | null;
let outputWindow: BrowserWindow | null;

const createWindow = (): void => {
  // First, get the primary display's dimensions
  const { width } = screen.getPrimaryDisplay().workAreaSize;

  // Calculate the window's width based on the device, with a minimum fallback
  const windowWidth = Math.max(400, Math.min(450, width));

  // Create the browser window with dynamic width and fixed height
  mainWindow = new BrowserWindow({
    width: 560,
    height: 60, // Fixed height
    transparent: true, // Make the window transparent
    frame: false, // Remove the window frame, necessary for a truly transparent window without native title bar
    resizable: true, // Prevent resizing
    webPreferences: {
      preload: MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY, // Adjust as necessary
      contextIsolation: true, // For demonstration purposes; consider security implications
      nodeIntegration: false,
    },
  });

  // and load the index.html of the app.
  mainWindow.loadURL(MAIN_WINDOW_WEBPACK_ENTRY);

  // Open the DevTools.
  // mainWindow.webContents.openDevTools();

  mainWindow.on("closed", () => {
    mainWindow = null;
  });
};

// This method will be called when Electron has finished
// initialization and is ready to create browser windows.
// Some APIs can only be used after this event occurs.
app.on("ready", () => {
  createWindow(); // Or you might not want to create it immediately based on your new requirement
  // createOutputWindow(); // Depending on your logic, you might not need this here anymore

  // Register the global shortcut
  const ret = globalShortcut.register("Command+`", () => {
    console.log("Command+` is pressed");
    if (!mainWindow) {
      createWindow();
    } else {
      mainWindow.focus(); // If the window already exists, bring it to the front
    }
  });

  if (!ret) {
    console.log("registration failed");
  }

  // Check whether a shortcut is registered.
  console.log(globalShortcut.isRegistered("Command+`"));
});

app.on("will-quit", () => {
  // Unregister all shortcuts.
  globalShortcut.unregisterAll();
});

// Quit when all windows are closed, except on macOS. There, it's common
// for applications and their menu bar to stay active until the user quits
// explicitly with Cmd + Q.
app.on("window-all-closed", () => {
  if (process.platform !== "darwin") {
    app.quit();
  }
});

app.on("activate", () => {
  // On OS X it's common to re-create a window in the app when the
  // dock icon is clicked and there are no other windows open.
  if (BrowserWindow.getAllWindows().length === 0) {
    createWindow();
  }
});

// In this file you can include the rest of your app's specific main process
// code. You can also put them in separate files and import them here.

ipcMain.on("user-input", async (event, input: string) => {
  if (!outputWindow) {
    createOutputWindow();
    mainWindow.webContents.openDevTools();
  }

  if (mainWindow) {
    mainWindow.close();
  }

  try {
    const message = { role: "user", content: input };
    const response = await ollama.chat({
      model: "mistral",
      messages: [message],
      stream: true,
    });
    for await (const part of response) {
      outputWindow?.webContents.send("ollama-output", part.message.content);
    }

    outputWindow?.webContents.send("ollama-output-end");
  } catch (e) {
    console.log(e);
  }
});

ipcMain.on("close-output-window", async (event, input: string) => {
  outputWindow?.close();
});

// _________

function createOutputWindow() {
  const { width, height } = screen.getPrimaryDisplay().workAreaSize;

  outputWindow = new BrowserWindow({
    width: 420, // Adjust the width as needed
    height: 420, // Adjust the height as needed
    x: width - 432, // Position the window to the right. Adjust width as necessary.
    y: 0, // Position the window to the top.
    alwaysOnTop: true, // Keep the window always on top
    frame: false, // No frame for a cleaner look
    transparent: true,
    resizable: true,
    movable: true,
    webPreferences: {
      preload: MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY, // Adjust as necessary
      contextIsolation: true,
      nodeIntegration: false,
    },
  });

  // Load the HTML file or content you want to display in the output window
  outputWindow.loadURL(OUTPUT_WINDOW_WEBPACK_ENTRY);
  outputWindow.webContents.openDevTools();

  outputWindow.on("closed", () => {
    outputWindow = null;
  });
}
